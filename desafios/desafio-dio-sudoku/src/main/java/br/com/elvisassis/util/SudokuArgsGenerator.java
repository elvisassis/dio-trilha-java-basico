package br.com.elvisassis.util;import java.util.*;public class SudokuArgsGenerator {    private static final int SIZE = 9;    public static void main(String[] args) {        int clues = 30; // quantidade de dicas fixas        int[][] fullBoard = generateFullSudoku();        int[][] puzzle = generatePuzzleFromSolution(fullBoard, clues);        StringBuilder builder = new StringBuilder();        for (int row = 0; row < SIZE; row++) {            for (int col = 0; col < SIZE; col++) {                int value = fullBoard[row][col];                boolean fixed = puzzle[row][col] != 0;                builder.append(col).append(",").append(row)                        .append(";").append(value).append(",").append(fixed)                        .append(" ");            }        }        String result = builder.toString().trim();        System.out.println(result);    }    private static int[][] generateFullSudoku() {        int[][] board = new int[SIZE][SIZE];        solve(board);        return board;    }    private static boolean solve(int[][] board) {        for (int row = 0; row < SIZE; row++) {            for (int col = 0; col < SIZE; col++) {                if (board[row][col] == 0) {                    List<Integer> numbers = new ArrayList<>();                    for (int i = 1; i <= 9; i++) numbers.add(i);                    Collections.shuffle(numbers);                    for (int num : numbers) {                        if (isValid(board, row, col, num)) {                            board[row][col] = num;                            if (solve(board)) return true;                            board[row][col] = 0;                        }                    }                    return false;                }            }        }        return true;    }    private static boolean isValid(int[][] board, int row, int col, int num) {        for (int i = 0; i < SIZE; i++) {            if (board[row][i] == num || board[i][col] == num)                return false;        }        int boxRow = row - row % 3;        int boxCol = col - col % 3;        for (int r = boxRow; r < boxRow + 3; r++) {            for (int c = boxCol; c < boxCol + 3; c++) {                if (board[r][c] == num)                    return false;            }        }        return true;    }    private static int[][] generatePuzzleFromSolution(int[][] solution, int clues) {        int[][] puzzle = new int[SIZE][SIZE];        // Copia a solução para o puzzle        for (int row = 0; row < SIZE; row++)            System.arraycopy(solution[row], 0, puzzle[row], 0, SIZE);        // Remove células aleatoriamente        List<int[]> positions = new ArrayList<>();        for (int row = 0; row < SIZE; row++)            for (int col = 0; col < SIZE; col++)                positions.add(new int[]{row, col});        Collections.shuffle(positions);        int cellsToRemove = SIZE * SIZE - clues;        for (int i = 0; i < cellsToRemove; i++) {            int[] pos = positions.get(i);            puzzle[pos[0]][pos[1]] = 0;        }        return puzzle;    }}